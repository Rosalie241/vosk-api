name: vosk-api

on: [ push, pull_request ]

jobs:
  build-mingw:
    runs-on: windows-2022
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64 }
          - { sys: ucrt64,  env: ucrt-x86_64 }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: alphacep/openfst
          path: tools/openfst
      - uses: actions/checkout@v4
        with:
          repository: xianyi/OpenBLAS
          path: tools/OpenBLAS
          ref: v0.3.20
      - uses: actions/checkout@v4
        with:
          repository: alphacep/clapack
          path: tools/clapack
          ref: v3.2.1
      - uses: actions/checkout@v4
        with:
          repository: alphacep/kaldi
          path: tools/kaldi
          ref: vosk-android
      - uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: vosk-api-${{matrix.sys}}
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          path-type: inherit
          update: true
          install: >-
            make
            mingw-w64-${{ matrix.env }}-autotools
            mingw-w64-${{ matrix.env }}-cmake
            mingw-w64-${{ matrix.env }}-gcc
            git
      - name: Prepare Environment
        run: |
          $env:revision = git describe --tags --always
          echo "GIT_REVISION=$env:revision" >> $env:GITHUB_ENV
        shell: pwsh
      - name: Prepare ccache wrappers
        run: |
          export ccache_path="$(pwd)/ccache_wrappers"
          mkdir -p "$ccache_path"

          # workaround for OpenBLAS not supporting CXX="ccache g++"
          for f in cc c++ gcc g++
          do
            echo '#!/usr/bin/env bash'          >  "$ccache_path/$f"
            echo "exec ccache $(which $f) \$@"  >> "$ccache_path/$f"
            chmod +x "$ccache_path/$f"
          done
        shell: msys2 {0}
      - name: Build OpenFST
        run: |
          mkdir "$(pwd)/install" -p

          export src_dir="$(pwd)/tools/openfst"
          export install_dir="$(pwd)/install"

          cd "$src_dir"
          autoreconf -i

          CXX="ccache g++" CXXFLAGS="-O3 -ftree-vectorize -DFST_NO_DYNAMIC_LINKING" \
          ./configure --prefix="$install_dir" \
            --enable-shared --enable-static --with-pic --disable-bin \
            --enable-lookahead-fsts --enable-ngram-fsts

          make -j$(nproc)
          make install
        shell: msys2 {0}
      - name: Build OpenBLAS
        run: |
          mkdir "$(pwd)/install" -p

          export src_dir="$(pwd)/tools/OpenBLAS"
          export install_dir="$(pwd)/install"

          # workaround for CXX="ccache g++" not working
          export PATH="$(pwd)/ccache_wrappers:$PATH"

          cd "$src_dir"
          make BINARY=64 ONLY_CBLAS=1 DYNAMIC_ARCH=1 TARGET=NEHALEM USE_LOCKING=1 USE_THREAD=0 -j$(nproc)
          make install PREFIX="$install_dir" -j$(nproc)

        shell: msys2 {0}
      - name: Build clapack
        run: |
          mkdir "$(pwd)/install" -p

          export src_dir="$(pwd)/tools/clapack"
          export install_dir="$(pwd)/install"

          mkdir -p "$install_dir"

          mkdir "$src_dir/build"
          cd "$src_dir/build"

          cmake -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Release .. -G "MSYS Makefiles"
          make -C F2CLIBS/libf2c -j$(nproc)
          make -C BLAS -j$(nproc)
          make -C SRC -j$(nproc)

          # install static libraries
          find . -name *.a -exec cp {} "$install_dir/lib" \;
        shell: msys2 {0}
      - name: Build kaldi
        run: |
          mkdir "$(pwd)/install" -p

          export src_dir="$(pwd)/tools/kaldi"
          export openblas_dir="$(pwd)/install"

          cd "$src_dir/src"

          # fix compilation
          sed -i 's|dynamic_kaldi=true;|dynamic_kaldi=false;|g' "$src_dir/src/configure"
          sed -i 's|!defined(__CYGWIN__)|!defined(_WIN32)|g' "$src_dir/src/nnet3bin/cuda-gpu-available.cc"

          CXX="ccache g++" CXXFLAGS="-Wno-template-id-cdtor -Wno-missing-template-keyword -O3 -ftree-vectorize -DFST_NO_DYNAMIC_LINKING" ./configure --static --mingw=yes --use-cuda=no \
            --mathlib=OPENBLAS_CLAPACK \
            --openblas-clapack-root="$openblas_dir" \
            --fst-root="$openblas_dir" --fst-version=1.8.0

          make online2 rnnlm -j$(nproc)
        shell: msys2 {0}
      - name: Build vosk-api
        run: |
          export kaldir_dir="$(pwd)/tools/kaldi"
          export install_dir="$(pwd)/install"

          # use lto and disable debugging symbols
          sed -i "s|CFLAGS=-g|CFLAGS=-flto|g" src/Makefile

          cd src
          make KALDI_ROOT="$kaldir_dir" OPENFST_ROOT="$install_dir" OPENBLAS_ROOT="$install_dir" EXT=dll -j$(nproc)
        shell: msys2 {0}
      - name: Upload vosk-api 
        uses: actions/upload-artifact@v4
        with:
          name: vosk-api-${{matrix.sys}}-${{ env.GIT_REVISION }}
          path: src/libvosk.dll


